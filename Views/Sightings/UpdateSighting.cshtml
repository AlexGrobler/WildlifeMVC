@model WildlifeMVC.ViewModels.SightingViewModel

@{
    ViewBag.Title = "UpdateSighting";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Header = "Edit Sighting";
    ViewBag.Description = "Update the details for the sighting";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ID)

    <div class="container">
        <hr />
        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    @Html.LabelFor(model => model.SpeciesID, htmlAttributes: new { @class = "form-label" })
                    @Html.DropDownListFor(model => model.SpeciesID, Model.SpeciesList, "Select a Species", new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(model => model.SpeciesID, "", new { @class = "form-text" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(model => model.XCoordinate, htmlAttributes: new { @class = "form-label" })
                    @Html.EditorFor(model => model.XCoordinate, new { htmlAttributes = new { @class = "form-control", type = "number", step = "any", required = "required", min = "-99", max = "99" } })
                    @Html.ValidationMessageFor(model => model.XCoordinate, "", new { @class = "form-text" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(model => model.YCoordinate, htmlAttributes: new { @class = "form-label" })
                    @Html.EditorFor(model => model.YCoordinate, new { htmlAttributes = new { @class = "form-control", type = "number", step = "any", required = "required", min = "-99", max = "99" } })
                    @Html.ValidationMessageFor(model => model.YCoordinate, "", new { @class = "form-text" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(model => model.TimeStamp, htmlAttributes: new { @class = "form-label" })
                    @Html.EditorFor(model => model.TimeStamp, new { htmlAttributes = new { @class = "form-control", type = "date", required = "required" } })
                    @Html.ValidationMessageFor(model => model.TimeStamp, "", new { @class = "form-text" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "form-label" })
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", maxlength = "2500" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "form-text" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "form-label" })
                    @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control", maxlength = "255" } })
                    @Html.ValidationMessageFor(model => model.Location, "", new { @class = "form-text" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(model => model.County, htmlAttributes: new { @class = "form-label" })
                    @Html.DropDownListFor(model => model.County, (SelectList)ViewBag.Counties, "Select a County", new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(model => model.County, "", new { @class = "form-text" })
                </div>
            </div>
            <div class="col-md-6">
                <div id="map" style="height: 600px;"></div>
            </div>
        </div>
    </div>
    <div class="mt-3">
        <button type="submit" value="Save" class="btn btn-primary">Save</button> |
        <a class="link-primary link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover" href="@Url.Action("SightingsIndex")">Back to Sightings</a>
    </div>
}


<script>
     //using the Leaflet library to create an interactive map for sightings

    //get raw values for lat and long from model
    let currentLat = @Model.XCoordinate;
    let currentLng = @Model.YCoordinate;

    //set map view to current marker location
    let map = L.map('map').setView([currentLat, currentLng], 7);

    //get map layer from OpenStreetMap
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: 'Map data © <a href="https://openstreetmap.org">OpenStreetMap</a> contributors'
    }).addTo(map);

    //instantiate marker with lat and long taken from model
    let marker = L.marker([currentLat, currentLng]).addTo(map);

    //add on-click event to map, as per Leaflet documentation
    map.on('click', function (e) {
        let lat = e.latlng.lat;
        let lng = e.latlng.lng;

        //update the form values
        document.getElementById('XCoordinate').value = lat.toFixed(5);
        document.getElementById('YCoordinate').value = lng.toFixed(5);

        //set marker lat and long
        marker.setLatLng(e.latlng);
    });

    //update the marker's position if a user manually enters the cooridantes into the form inputs
    //using even listener
    let latInput = document.getElementById('XCoordinate');
    let longInput = document.getElementById('YCoordinate');

    latInput.addEventListener('change', function () {
        handleInputChange();
    });

    longInput.addEventListener('change', function () {
        handleInputChange();
    });

    function handleInputChange() {
        let lat = latInput.value;
        let lng = longInput.value;
        let newLatLang = new L.LatLng(lat, lng); //create a new latlng object, as per leaflet docs

        if (marker) {
            //set coords if marker exists
            marker.setLatLng(newLatLang);
        }
        else {
            //instantiate marker if none exists
            marker = L.marker(newLatLang).addTo(map);
        }
    }

</script>