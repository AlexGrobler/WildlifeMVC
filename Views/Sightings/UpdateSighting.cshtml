@model WildlifeMVC.ViewModels.SightingViewModel

@{
    ViewBag.Title = "UpdateSighting";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>UpdateSighting</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Sighting</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)

        <div class="form-group">
            @Html.LabelFor(model => model.SpeciesID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.SpeciesID, Model.SpeciesList, "Select a Species", new { @class = "form-control", required = "required" })
                @Html.ValidationMessageFor(model => model.SpeciesID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.XCoordinate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.XCoordinate, new { htmlAttributes = new { @class = "form-control", type = "number", step = "any", required = "required", min = "-99", max = "99" } })
                @Html.ValidationMessageFor(model => model.XCoordinate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.YCoordinate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.YCoordinate, new { htmlAttributes = new { @class = "form-control", type = "number", step = "any", required = "required", min = "-99", max = "99" } })
                @Html.ValidationMessageFor(model => model.YCoordinate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TimeStamp, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TimeStamp, new { htmlAttributes = new { @class = "form-control", type = "date", required = "required" } })
                @Html.ValidationMessageFor(model => model.TimeStamp, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", maxlength = "2500" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control", maxlength = "255" } })
                @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.County, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.County, new { htmlAttributes = new { @class = "form-control", maxlength = "50", pattern = "[a-zA-Z ]*", title = "Only letters are allowed." } })
                @Html.ValidationMessageFor(model => model.County, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to Sightings", "SightingsIndex")
</div>

<div id="map" style="height: 400px; width: 400px;"></div>

<script>
    var currentLat = parseFloat(@Html.Raw(Json.Encode(Model.XCoordinate)));
    var currentLng = parseFloat(@Html.Raw(Json.Encode(Model.YCoordinate)));

    var map = L.map('map').setView([currentLat, currentLng], 7);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: 'Map data © <a href="https://openstreetmap.org">OpenStreetMap</a> contributors'
    }).addTo(map);

    var marker = L.marker([currentLat, currentLng]).addTo(map);

    map.on('click', function (e) {
        var lat = e.latlng.lat;
        var lng = e.latlng.lng;

        // Populate the coordinate fields
        document.getElementById('XCoordinate').value = lat.toFixed(5);
        document.getElementById('YCoordinate').value = lng.toFixed(5);

        marker.setLatLng(e.latlng);
    });
</script>